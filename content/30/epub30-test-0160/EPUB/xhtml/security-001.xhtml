<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
       

        <script>
        //<![CDATA[
        
        try
        {
            console.debug(window.location.href);
        }
        catch (e)
        {
        }
        
        var breached = false;
        try
        {
            breached = !window.parent
            || (window.parent != window
                && (typeof window.parent.document !== "undefined")
                && (typeof window.parent.document.documentElement !== "undefined")
            );

            console.debug(">> 1: " + breached);

            if (breached && (typeof window.parent !== "undefined"))
            {
                var p = window.parent.document.createElementNS("http://www.w3.org/1999/xhtml", "marquee");
                p.setAttribute("style", "position: absolute; top:0; left: 0; right: 0; z-index: 9999; font-weight: bold; font-size: 200%; color: black; text-align: center; border: 1em solid red; background: white;");
                var p1 = window.parent.document.createElementNS("http://www.w3.org/1999/xhtml", "span");
                p1.setAttribute("style", "color: green;");
                p1.appendChild(window.parent.document.createTextNode("SECURITY BREACH"));
                p.appendChild(p1);

                p.appendChild(window.parent.document.createTextNode(" --- "));
                
                var p2 = window.parent.document.createElementNS("http://www.w3.org/1999/xhtml", "span");
                p2.setAttribute("style", "color: blue;");
                p2.appendChild(window.parent.document.createTextNode("THE READING SYSTEM'S INTEGRITY HAS BEEN COMPROMISED."));
                p.appendChild(p2);
                
                window.parent.document.body.insertBefore(p, window.parent.document.body.childNodes[0]);

                console.debug(">> 2");
            }
        }
        catch(e)
        {
            breach = false;
            console.error(e);
        }

        //if (document.readyState === "complete")
        document.addEventListener("DOMContentLoaded", function()
        {
            document.getElementById(breached ? "failure" : "success").style.display = "block";
            document.getElementById("wait").style.display = "none";
        }, false);

        
        //]]>
        </script>
        
        
        <meta charset="utf-8" />
        <link rel="stylesheet" type="text/css" href="../css/base.css" />
    </head>
    <body>
    	<section id="sec">
    		<h3>Reading System integrity</h3>
    		<p>This section contains tests for Reading System integrity.</p>
			
			<section id="sec-001" class="otest">
				<h4><span class="nature">[OPTIONAL]</span> <span class="test-id">sec-001</span> <code>iframe window.parent</code></h4>
				
				<p class="desc">Tests whether access (read and write) to the <code>window.parent</code> object context is forbidden, from the <code>iframe</code> (if any) that contains this content document.</p>
        		
                <p class="conditional">Javascript scripting must be supported for this test to execute properly.</p>
                        
				<p class="eval">The test passes if the message <strong>"PASS"</strong> is displayed below (instead of "FAIL").
The test effectively passes if this content document is not hosted by an <code>iframe</code> (e.g. native UIWebView),
or if the Javascript code executed in this document is unable to access the parent object context.</p>
        		
                <p style="font-size: 140%; text-align: center;">
                    <span id="wait" style="color: black;">
                        WAIT...
                    </span>
                    <span id="success" style="color: green; display: none;">
                        PASS
                    </span>
                    <span id="failure" style="color: red; display: none;">
                        FAIL
                    </span>
                </p>
                
                <p>Note that in the event of the test failing, the large banner displayed at the top of the page is a trivial illustration of the possible damage that a malicious e-book could afflict. In practice, a mal-intentioned EPUB author would probably <strong>silently</strong> hijack normal functionality, in order to collect sensitive user information, etc.</p>
			</section>
    	</section>
    </body>
</html>
